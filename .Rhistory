library(readr)
library(here)
library(readr)
library(gt)
library(tufte)
library(janitor)
library(tsibble)
library(feasts)
library(countrycode)
library(knitr)
library(sf)
library(wbstats)
library(rnaturalearth)
library(raster)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
library(ggspatial)
library(patchwork)
library(tmap)
knitr::opts_chunk$set(echo = TRUE)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
library(tidyverse)
library(tibble)
library(ggplot2)
library(purrr)
library(tidyr)
library(readr)
library(here)
library(readr)
library(gt)
library(tufte)
library(janitor)
library(tsibble)
library(feasts)
library(countrycode)
library(knitr)
library(sf)
library(wbstats)
library(rnaturalearth)
library(raster)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
library(ggspatial)
library(patchwork)
library(tmap)
library(tidyverse)
library(tibble)
library(ggplot2)
library(purrr)
library(tidyr)
library(readr)
library(here)
library(readr)
library(gt)
library(tufte)
library(janitor)
library(tsibble)
library(feasts)
library(countrycode)
library(knitr)
library(sf)
library(wbstats)
library(rnaturalearth)
library(raster)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
library(ggspatial)
library(patchwork)
library(tmap)
library(tidyverse)
library(tibble)
library(ggplot2)
library(purrr)
library(tidyr)
library(readr)
library(here)
library(readr)
library(gt)
library(tufte)
library(janitor)
library(tsibble)
library(feasts)
library(countrycode)
library(knitr)
library(sf)
library(wbstats)
library(rnaturalearth)
library(raster)
library(terra)
library(spData)
library(spDataLarge)
library(tidyverse)
library(ggspatial)
library(patchwork)
library(tmap)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
knitr::opts_chunk$set(echo = TRUE)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
knitr::opts_chunk$set(echo = TRUE)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
# water_data <- water_resources %>%
#   subset("Unit", "Symbol") +
#   group_by(Country, Variable) %>%
#   pivot_wider(names_from = Variable,
#               values_from = c('"2020"', Symbol, Unit))
#
# water_data
water <- read_csv("data/AQUASTAT_Dissemination_System.csv")
colnames(water)
water <-  water %>% select(-"...6")
# Add a new column "Continent" to water1 that corresponds to Country
water1 <- water1 %>%
mutate(Continent = countrycode(sourcevar = Country, origin = "country.name", destination = "continent")) %>%
dplyr::rename(Urban_population = `Urban population_1000 inhab`)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
# water_data <- water_resources %>%
#   subset("Unit", "Symbol") +
#   group_by(Country, Variable) %>%
#   pivot_wider(names_from = Variable,
#               values_from = c('"2020"', Symbol, Unit))
#
# water_data
water <- read_csv("data/AQUASTAT_Dissemination_System.csv")
colnames(water)
water <-  water %>% select(-"...6")
knitr::opts_chunk$set(echo = TRUE)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
# water_data <- water_resources %>%
#   subset("Unit", "Symbol") +
#   group_by(Country, Variable) %>%
#   pivot_wider(names_from = Variable,
#               values_from = c('"2020"', Symbol, Unit))
#
# water_data
water <- read_csv("data/AQUASTAT_Dissemination_System.csv")
colnames(water)
water <-  water %>% select(-"...6")
knitr::opts_chunk$set(echo = TRUE)
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
# water_data <- water_resources %>%
#   subset("Unit", "Symbol") +
#   group_by(Country, Variable) %>%
#   pivot_wider(names_from = Variable,
#               values_from = c('"2020"', Symbol, Unit))
#
# water_data
water <- read_csv("data/AQUASTAT_Dissemination_System.csv")
colnames(water)
#water <-  water %>% select(-"...6")
water5 <- water
subwater <- subset(water, select = -c(Variable, Unit))
combin <- paste(water$Variable, water$Unit, sep = "_")
combin <- data.frame(combin)
water = cbind(subwater, combin)
colnames(water) <- c("Country", "Symbol", "2020", "Variable")
water1 <- water %>%
subset(select = -Symbol) %>%
group_by(Country) %>%
pivot_wider(names_from = (Variable),
values_from = "2020")
water_resources <- read_csv("data/AQUASTAT_Water_Resources.csv")
# water_data <- water_resources %>%
#   subset("Unit", "Symbol") +
#   group_by(Country, Variable) %>%
#   pivot_wider(names_from = Variable,
#               values_from = c('"2020"', Symbol, Unit))
#
# water_data
water <- read_csv("data/AQUASTAT_Dissemination_System.csv")
colnames(water)
#water <-  water %>% select(-"...6")
water5 <- water
subwater <- subset(water, select = -c(Variable, Unit))
combin <- paste(water$Variable, water$Unit, sep = "_")
combin <- data.frame(combin)
water = cbind(subwater, combin)
colnames(water) <- c("Country", "Symbol", "2020", "Variable")
water1 <- water %>%
subset(select = -Symbol) %>%
group_by(Country) %>%
pivot_wider(names_from = (Variable),
values_from = "2020")
knitr::opts_chunk$set(echo = TRUE)
library(tmap)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
library(here)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
library(here)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
tile2_2021_02_07 = read_stars(here("data", "VNP46A", "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
tile2_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
tile3_2021_02_16 =  read_stars(here("data", "VNP46A1","VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
tile4_2021_02_16 =  read_stars(here("data","VNP46A1","VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
# combine tiles into single stars object for each date (2021-02-07 and 2021-02-16), using st_mosaic
combined_02_07 = st_mosaic(tile1_2021_02_07, tile2_2021_02_07)
combined_02_16 = st_mosaic(tile3_2021_02_16, tile4_2021_02_16)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
library(here)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
tile2_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
tile3_2021_02_16 =  read_stars(here("data", "VNP46A1","VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
tile4_2021_02_16 =  read_stars(here("data","VNP46A1","VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
# combine tiles into single stars object for each date (2021-02-07 and 2021-02-16), using st_mosaic
combined_02_07 = st_mosaic(tile1_2021_02_07, tile2_2021_02_07)
combined_02_16 = st_mosaic(tile3_2021_02_16, tile4_2021_02_16)
#find the change in night lights intensity (presumably) caused by the storm by calculating the light difference between the two dates
difference <- combined_02_07 - combined_02_16
#check out difference in night lights intensity
plot(difference)
mask_blackout <- difference > 200
mask_blackout[mask_blackout == FALSE]  <- NA
blackout_mask_vector <- st_as_sf(mask_blackout) %>% st_make_valid() ##can plot() to check out what the blackout mask looks like
#crop the vectorized map to our region of interest using polygon of Houston's coordinates
houston_polygon <- st_polygon(list(rbind(c(-96.5,29), c(-96.5,30.5), c(-94.5, 30.5), c(-94.5,29), c(-96.5,29))))
#convert the polygon into a simple feature collection using st_sfc() and assign the CRS 4326, which is the same as the night lights data
houston_border_sf <- st_sfc(houston_polygon, crs = st_crs(mask_blackout))
#inspect the polygon crs to make sure the crs is 4326, nightlights dataset
#st_crs(houston_border_sf) == st_crs(mask_blackout)
# spatially subset the blackout mask to the Houston Area
houston_blackout <- blackout_mask_vector[houston_border_sf, ,]
#re-project the cropped blackout dataset to EPSG:3083 (NAD83 / Texas Centric Albers Equal Area)
houston_blackout <- st_transform(houston_blackout, crs = 'EPSG:3083')
## transform to sf object
final_houston_blackout <- st_as_sf(houston_blackout)
#verify that it's an sf object
#class(final_houston_blackout)
##verify that the final, transformed sf houston blackout dataset is 3083
#st_crs(final_houston_blackout)
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highways <- st_read("~/dev/eds223/assignment-3-floraham/data/gis_osm_roads_free_1.gpkg", query = query)
highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)
highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(stars)
library(tmap)
library(raster)
library(terra)
library(dplyr)
library(ggplot2)
library(here)
## Read in all four night lights tiles, in folder VNP46A1, using the package "stars"
tile1_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
tile2_2021_02_07 = read_stars(here("data", "VNP46A1", "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
tile3_2021_02_16 =  read_stars(here("data", "VNP46A1","VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
tile4_2021_02_16 =  read_stars(here("data","VNP46A1","VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
# combine tiles into single stars object for each date (2021-02-07 and 2021-02-16), using st_mosaic
combined_02_07 = st_mosaic(tile1_2021_02_07, tile2_2021_02_07)
combined_02_16 = st_mosaic(tile3_2021_02_16, tile4_2021_02_16)
#find the change in night lights intensity (presumably) caused by the storm by calculating the light difference between the two dates
difference <- combined_02_07 - combined_02_16
#check out difference in night lights intensity
plot(difference)
mask_blackout <- difference > 200
mask_blackout[mask_blackout == FALSE]  <- NA
blackout_mask_vector <- st_as_sf(mask_blackout) %>% st_make_valid() ##can plot() to check out what the blackout mask looks like
#crop the vectorized map to our region of interest using polygon of Houston's coordinates
houston_polygon <- st_polygon(list(rbind(c(-96.5,29), c(-96.5,30.5), c(-94.5, 30.5), c(-94.5,29), c(-96.5,29))))
#convert the polygon into a simple feature collection using st_sfc() and assign the CRS 4326, which is the same as the night lights data
houston_border_sf <- st_sfc(houston_polygon, crs = st_crs(mask_blackout))
#inspect the polygon crs to make sure the crs is 4326, nightlights dataset
#st_crs(houston_border_sf) == st_crs(mask_blackout)
# spatially subset the blackout mask to the Houston Area
houston_blackout <- blackout_mask_vector[houston_border_sf, ,]
#re-project the cropped blackout dataset to EPSG:3083 (NAD83 / Texas Centric Albers Equal Area)
houston_blackout <- st_transform(houston_blackout, crs = 'EPSG:3083')
## transform to sf object
final_houston_blackout <- st_as_sf(houston_blackout)
#verify that it's an sf object
#class(final_houston_blackout)
##verify that the final, transformed sf houston blackout dataset is 3083
#st_crs(final_houston_blackout)
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highways <- st_read("data/gis_osm_roads_free_1.gpkg", query = query)
highways <- st_read(here("data/gis_osm_roads_free_1.gpkg"), query = query)
query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
highways <- st_read(here("data/gis_osm_roads_free_1.gpkg"), query = query)
# reproject data to EPSG:3083
highways_3038 <- st_transform(highways, crs="EPSG:3083")
#verify it's the right crs
#st_crs(highways_3038)
# identify areas within 200m of all highways using st_buffer. Use st_union to dissolve overlapping polygons.
a_near_hwys <- st_buffer(highways_3038, dist = 200) %>% st_union()
# find areas that experienced blackouts that are further than 200m from a highway by spacially subsetting houston blackout areas to ones near highways, and taking st_difference of that.
blackouts_far_hwy_houston <- final_houston_blackout[a_near_hwys, , op = st_difference]
#plot to see what it looks like
#plot(blackouts_far_hwy_houston)
#load buildings dataset using st_read and the following SQL query to select only residential buildings
query_buildings <- "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"
buildings <- st_read("~/dev/eds223/assignment-3-floraham/data/gis_osm_buildings_a_free_1.gpkg", query = query_buildings)
#load buildings dataset using st_read and the following SQL query to select only residential buildings
query_buildings <- "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"
buildings <- st_read(here("data","gis_osm_buildings_a_free_1.gpkg"), query = query_buildings)
#load buildings dataset using st_read and the following SQL query to select only residential buildings
query_buildings <- "SELECT * FROM gis_osm_buildings_a_free_1 WHERE (type IS NULL AND name IS NULL) OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"
buildings <- st_read(here("data","gis_osm_buildings_a_free_1.gpkg"), query = query_buildings)
##check CRS's are the same. No, they're not!
#st_crs(buildings) == st_crs(blackouts_far_hwy_houston)
##transform buildings crs
buildings <- st_transform(buildings, crs = st_crs(blackouts_far_hwy_houston))
# filtering the houses data with the blackout mask
buildings_blackout <- buildings[blackouts_far_hwy_houston, drop = FALSE]
## View the data frame for inspection
#View(buildings_blackout)
#count number of impacted homes
print(paste0(nrow(buildings_blackout), " Houston homes experienced power outage due to the Texas storms in Feburary, 2021"))
census <- st_read("~/dev/eds223/assignment-3-floraham/data/ACS_2019_5YR_TRACT_48_TEXAS.gdb",  layer = "ACS_2019_5YR_TRACT_48_TEXAS")
census <- st_read(here("data","ACS_2019_5YR_TRACT_48_TEXAS.gdb"),  layer = "ACS_2019_5YR_TRACT_48_TEXAS")
income <- st_read("~/dev/eds223/assignment-3-floraham/data/ACS_2019_5YR_TRACT_48_TEXAS.gdb", layer = "X19_INCOME")
census <- st_read(here("data","ACS_2019_5YR_TRACT_48_TEXAS.gdb"),  layer = "ACS_2019_5YR_TRACT_48_TEXAS")
income <- st_read(here("data/ACS_2019_5YR_TRACT_48_TEXAS.gdb"), layer = "X19_INCOME")
#select median income field B19013e1
median_income <- income %>% dplyr::select(GEOID, B19013e1)
census <- st_read(here("data","ACS_2019_5YR_TRACT_48_TEXAS.gdb"),  layer = "ACS_2019_5YR_TRACT_48_TEXAS")
income <- st_read(here("data/ACS_2019_5YR_TRACT_48_TEXAS.gdb"), layer = "X19_INCOME")
#select median income field B19013e1
median_income <- income %>% dplyr::select(GEOID, B19013e1)
#determine which census tracts experienced blackouts
#Join the income data to the census tract geometries. Join by geometry ID
median_income_df <- median_income %>% rename(GEOID_Data = GEOID,
median_income = B19013e1)
##check types to varify that they are the same class
#class(median_income_df$GEOID_Data) == class(census$GEOID_Data)
joined_income_census <- left_join(census,
median_income_df,
by = "GEOID_Data")
## filter census data by buildings determined to be impacted by blackouts.
# transforming both objects to the correct crs
joined_income_census <- st_transform(joined_income_census, crs = st_crs(census))
buildings_blackout <- st_transform(buildings_blackout, crs = st_crs(census))
#check that they are the same crs
#st_crs(joined_income_census) == st_crs(buildings_blackout)
## filtering and mutating to add a blackout column for affected tracts
census_blackout <- joined_income_census[buildings_blackout,]%>% mutate(blackout = 'Y')
print(paste0(nrow(census_blackout), " census tracts had blackouts"))
#census_income_cropped combined with census_blackout
census_Y_N <- full_join(as.data.frame(joined_income_census), as.data.frame(census_blackout))
census_Y_N$blackout[is.na(census_Y_N$blackout)] = "N"
#check the class
#class(census_Y_N)
## make sure it's an sf object
census_Y_N <- st_as_sf(census_Y_N)
#check census_Y_N class, that it's a dataframe.
#class(census_Y_N)
#join income data to the census tract geometries and crop to region of interest
census_income_geom <- left_join(census, median_income_df,
by = "GEOID_Data") %>% st_transform(3083) #this is texas#
houston_border_sf <- houston_border_sf %>% st_transform(3083)
#spatial crop joined census data to houston border
census_income_geom_cropped <- census_income_geom[houston_border_sf, op = st_intersects]
## use tmap to plot income distribution and affected areas. Make graph aesthetics.
tmap_mode("plot")
tm_shape(census_income_geom_cropped) +
tm_graticules() +
tm_polygons("median_income", palette= "-viridis", title = "Median income") +
tm_shape(census_blackout) + tm_dots(size = 0.4, alpha = 0.5) +
tm_title( "Distribution of Med. Income & blackout status in Houston") +
tm_scalebar(position = c("RIGHT", "BOTTOM")) +
tm_compass(position = c("LEFT", "BOTTOM")) +
tm_xlab("Longitude", size = 0.5) +
tm_ylab("Latitude", rotation = 90, size = 0.5)
## this is for leaflet viewing in the future ##
tm_shape(census_income_geom_cropped) + tm_polygons("median_income", palette= "viridis") + tm_shape(census_blackout) + tm_dots(size = 0.4, alpha = 0.5)
#Plot from one dataset so that ggplot can plot both datasets on one axis & autogenerate legend
census_Y_N_houston <- census_Y_N %>% st_transform(3083)
houston_border_sf <- houston_border_sf %>% st_transform(3083)
census_Y_N_houston <- census_Y_N_houston[houston_border_sf, op = st_intersects]
ggplot(census_Y_N_houston, aes(median_income)) + geom_histogram(aes(color = blackout, fill = blackout), bins = 50) + ggtitle("Distribution of median income of homes in Houston by blackout status")
# plotting the comparison data via geom jitter plot
ggplot(census_Y_N_houston, aes(x = median_income, y = blackout)) +
geom_boxplot(aes(color = blackout), alpha = 0.8) +
labs(title = "Median Income of Houston Homes based on Blackout Status",
y = "Blackout Status",
x = "Median Income") +
theme_minimal()
## this is for leaflet viewing in the future ##
tm_shape(census_income_geom_cropped) + tm_polygons("median_income", palette= "viridis") + tm_shape(census_blackout) + tm_dots(size = 0.4, alpha = 0.5)
#Plot from one dataset so that ggplot can plot both datasets on one axis & autogenerate legend
census_Y_N_houston <- census_Y_N %>% st_transform(3083)
houston_border_sf <- houston_border_sf %>% st_transform(3083)
census_Y_N_houston <- census_Y_N_houston[houston_border_sf, op = st_intersects]
ggplot(census_Y_N_houston, aes(median_income)) + geom_histogram(aes(color = blackout, fill = blackout), bins = 50) + ggtitle("Distribution of median income of homes in Houston by blackout status")
# plotting the comparison data via geom jitter plot
ggplot(census_Y_N_houston, aes(x = median_income, y = blackout)) +
geom_boxplot(aes(color = blackout), alpha = 0.8) +
labs(title = "Median Income of Houston Homes based on Blackout Status",
y = "Blackout Status",
x = "Median Income") +
theme_minimal()
### Summarizing statistics
census_Y_N_houston %>%
group_by(blackout) %>%
summarize(mean = mean(median_income, na.rm = TRUE),
median = median(median_income, na.rm = TRUE),
sd = sd(median_income, na.rm = TRUE))
# create map using separate income df's
tm_shape(census_income_geom_cropped) +
tm_fill(fill = 'median_income', palette = c('#d0f2f7', '#20a6bc'), #fill by inc, impacted
title = "Median Income (Impacted)") +
tm_lines(alpha = 0.4) +
tm_shape(unimpacted) +
tm_fill(fill = 'median_income', palette = c('#d8efdd', '#5abd6f'), #fill by inc, unimpacted
title = "Median Income (Unimpacted)") +
tm_lines(alpha = 0.4) +
tm_compass(type = "arrow", position = c("right", "top"), size = 2) + #add compass
tm_scale_bar() # add scalebar
# create map using separate income df's
tm_shape(census_income_geom_cropped) +
tm_fill(fill = 'median_income', palette = c('#d0f2f7', '#20a6bc'), #fill by inc, impacted
title = "Median Income (Impacted)") +
tm_lines(alpha = 0.4) +
tm_shape(census_blackout) +
tm_fill(fill = 'median_income', palette = c('#d8efdd', '#5abd6f'), #fill by inc, unimpacted
title = "Median Income (Unimpacted)") +
tm_lines(alpha = 0.4) +
tm_compass(type = "arrow", position = c("right", "top"), size = 2) + #add compass
tm_scale_bar() # add scalebar
# create map using separate income df's
tm_shape(census_income_geom_cropped) +
tm_fill(fill = 'median_income', palette = c('#d0f2f7', '#20a6bc'), #fill by inc, impacted
title = "Median Income (Impacted)") +
tm_lines(alpha = 0.4) +
tm_shape(census_blackout) +
tm_fill(fill = 'median_income', palette = c('#d8efdd', '#5abd6f'), #fill by inc, unimpacted
title = "Median Income (Unimpacted)") +
tm_lines(alpha = 0.4) +
tm_compass(type = "arrow", position = c("right", "top"), size = 2) + #add compass
tm_scale_bar() # add scalebar
# create map using separate income df's
tm_shape(census_blackout) +
tm_fill(fill = 'median_income', palette = c('#d0f2f7', '#20a6bc'), #fill by inc, impacted
title = "Median Income (Impacted)") +
tm_lines(alpha = 0.4) +
tm_shape(census_blackout) +
tm_fill(fill = 'median_income', palette = c('#d8efdd', '#5abd6f'), #fill by inc, unimpacted
title = "Median Income (Unimpacted)") +
tm_lines(alpha = 0.4) +
tm_compass(type = "arrow", position = c("right", "top"), size = 2) + #add compass
tm_scale_bar() # add scalebar
ggplot(census_Y_N_houston, aes(median_income)) + geom_histogram(aes(color = blackout, fill = blackout), bins = 50, fill = "white") + ggtitle("Distribution of median income of homes in Houston by blackout status")
```
ggplot(census_Y_N_houston, aes(median_income)) + geom_histogram(aes(color = blackout, fill = blackout), bins = 50, fill = "white") + ggtitle("Distribution of median income of homes in Houston by blackout status") + theme_minimal()
```
ggplot(census_Y_N_houston, aes(median_income))+geom_histogram(aes(color = blackout, fill = blackout), bins = 50, fill = "white") + ggtitle("Distribution of median income of homes in Houston by blackout status")
```
ggplot(census_Y_N_houston, aes(median_income))+geom_histogram(aes(color = blackout, fill = blackout), bins = 50, fill = "white") + ggtitle("Distribution of median income of homes in Houston by blackout status")
```
